#!/usr/bin/env node
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _installNodeHeaders$rebuildNativeModules = require('./main.js');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

require('babel-core/polyfill');

var argv = require('yargs').usage('Usage: electron-rebuild --version [version] --module-dir [path]').help('h').alias('h', 'help').describe('v', 'The version of Electron to build against').alias('v', 'version').describe('m', 'The path to the node-modules directory to rebuild').alias('m', 'module-dir').epilog('Copyright 2015').argv;

if (!argv.v) {
  // NB: We assume here that electron-prebuilt is a sibling package of ours
  var pkg = null;
  try {
    pkg = require('../../electron-prebuilt/package.json');
    argv.v = pkg.version;
  } catch (e) {
    console.error('Unable to find electron-prebuilt\'s version number, either install it or specify an explicit version');
    process.exit(-1);
  }
}

if (!argv.m) {
  // NB: We assume here that we're going to rebuild the immediate parent's
  // node modules, which might not always be the case but it's at least a
  // good guess
  try {
    argv.m = _path2['default'].resolve(__dirname, '../..');
  } catch (e) {
    console.error('Unable to find parent node_modules directory, specify it via --module-dir');
    process.exit(-1);
  }
}

_installNodeHeaders$rebuildNativeModules.installNodeHeaders(argv.v).then(function () {
  return _installNodeHeaders$rebuildNativeModules.rebuildNativeModules(argv.v, argv.m);
}).then(function () {
  return process.exit(0);
})['catch'](function (e) {
  console.error(e.message);
  console.error(e.stack);
  process.exit(-1);
});