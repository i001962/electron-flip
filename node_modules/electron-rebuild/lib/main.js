'use strict';

var _this = this;

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.installNodeHeaders = installNodeHeaders;
exports.rebuildNativeModules = rebuildNativeModules;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _import = require('lodash');

var _import2 = _interopRequireDefault(_import);

var _childProcess = require('child_process');

var _childProcess2 = _interopRequireDefault(_childProcess);

var _spawn = require('./spawn');

var _spawn2 = _interopRequireDefault(_spawn);

var _promisify = require('./promisify');

var _promisify2 = _interopRequireDefault(_promisify);

require('babel-core/polyfill');

var fs = _promisify2['default'](require('fs'));

var getHeadersRootDirForVersion = function getHeadersRootDirForVersion(version) {
  return _path2['default'].resolve(__dirname, 'headers');
};

var checkForInstalledHeaders = function checkForInstalledHeaders(nodeVersion, headersDir) {
  var canary, stat;
  return regeneratorRuntime.async(function checkForInstalledHeaders$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        canary = _path2['default'].join(headersDir, '.node-gyp', nodeVersion, 'common.gypi');
        context$1$0.next = 3;
        return fs.stat(canary);

      case 3:
        stat = context$1$0.sent;

        if (stat) {
          context$1$0.next = 6;
          break;
        }

        throw new Error('Canary file \'common.gypi\' doesn\'t exist');

      case 6:
        return context$1$0.abrupt('return', true);

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

var spawnWithHeadersDir = function spawnWithHeadersDir(cmd, args, headersDir) {
  var env;
  return regeneratorRuntime.async(function spawnWithHeadersDir$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        env = _import2['default'].extend({}, process.env, { HOME: headersDir });

        if (process.platform === 'win32') {
          env.USERPROFILE = env.HOME;
        }

        context$1$0.prev = 2;
        context$1$0.next = 5;
        return _spawn2['default']({ cmd: cmd, args: args, opts: { env: env } });

      case 5:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 8:
        context$1$0.prev = 8;
        context$1$0.t0 = context$1$0['catch'](2);

        if (context$1$0.t0.stdout) console.log(context$1$0.t0.stdout);
        if (context$1$0.t0.stderr) console.log(context$1$0.t0.stderr);

        throw context$1$0.t0;

      case 13:
      case 'end':
        return context$1$0.stop();
    }
  }, null, _this, [[2, 8]]);
};

function installNodeHeaders(nodeVersion) {
  var nodeDistUrl = arguments[1] === undefined ? null : arguments[1];
  var headersDir = arguments[2] === undefined ? null : arguments[2];
  var distUrl, cmd, args;
  return regeneratorRuntime.async(function installNodeHeaders$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        headersDir = headersDir || getHeadersRootDirForVersion(nodeVersion);
        distUrl = nodeDistUrl || 'https://gh-contractor-zcbenz.s3.amazonaws.com/atom-shell/dist';
        context$1$0.prev = 2;
        context$1$0.next = 5;
        return checkForInstalledHeaders(headersDir);

      case 5:
        return context$1$0.abrupt('return');

      case 8:
        context$1$0.prev = 8;
        context$1$0.t1 = context$1$0['catch'](2);

      case 10:
        cmd = 'node';
        args = [require.resolve('npm/node_modules/node-gyp/bin/node-gyp'), 'install', '--target=' + nodeVersion, '--arch=' + process.arch, '--dist-url=' + distUrl];
        context$1$0.next = 14;
        return spawnWithHeadersDir(cmd, args, headersDir);

      case 14:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[2, 8]]);
}

function rebuildNativeModules(nodeVersion, nodeModulesPath) {
  var headersDir = arguments[2] === undefined ? null : arguments[2];
  var cmd, args;
  return regeneratorRuntime.async(function rebuildNativeModules$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        headersDir = headersDir || getHeadersRootDirForVersion(nodeVersion);
        context$1$0.next = 3;
        return checkForInstalledHeaders(nodeVersion, headersDir);

      case 3:
        cmd = 'node';
        args = [require.resolve('npm/bin/npm-cli'), 'rebuild', '--target=' + nodeVersion, '--arch=' + process.arch];
        context$1$0.next = 7;
        return spawnWithHeadersDir(cmd, args, headersDir);

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}